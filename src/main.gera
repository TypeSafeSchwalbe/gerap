
mod gerap

use gerap::(files, build, parser)
use std::*

var USAGE = "Usage:
  gerap new <name> 
    => Create a new project in a new directory
  gerap init
    => Create a new project in this directory
  gerap build
    => Build the project in this directory
  gerap run <args...>
    => Run the project in this directory, passing the given arguments
  gerap clean
    => Clears the cache, causing all packages to be downloaded again"

proc main() {
    var args = env::args()
    case length(args) < 2 -> {
        io::println(USAGE)
        prc::exit(1)
    }
    case args[1] {
        "new" -> {
            case length(args) != 3 -> {
                io::println(USAGE)
                prc::exit(1)
            }
            var project_name = args[2]
            case project_name |> files::make_project_dir() {
                #err e -> {
                    "Unable to create project: _"
                        |> str::fmt([e]) |> io::println()
                    prc::exit(1)
                }
            } else {}
        }
        "init" -> {
            case length(args) != 2 -> {
                io::println(USAGE)
                prc::exit(1)
            }
            case files::init_project_dir() {
                #err e -> {
                    "Unable to initialize project: _"
                        |> str::fmt([e]) |> io::println()
                    prc::exit(1)
                }
            } else {}
        }
        "build" -> {
            case length(args) != 2 -> {
                io::println(USAGE)
                prc::exit(1)
            }
            io::read_file("config.gpc")
                |> res::unwrap_or_else(|e| {
                    io::println("Unable to find package file ('config.gpc')!")
                    prc::exit(1)
                    return panic("")
                })
                |> parser::parse_file()
                |> res::unwrap_or_else(|e| {
                    "Unable to read package file: _"
                        |> str::fmt([e])
                        |> io::println()
                    prc::exit(1)
                    return panic("")
                })
                |> build::build_project()
        }
        "run" -> {
            var root_project = io::read_file("config.gpc")
                |> res::unwrap_or_else(|e| {
                    io::println("Unable to find package file ('config.gpc')!")
                    prc::exit(1)
                    return panic("")
                })
                |> parser::parse_file()
                |> res::unwrap_or_else(|e| {
                    "Unable to read package file: _"
                        |> str::fmt([e])
                        |> io::println()
                    prc::exit(1)
                    return panic("")
                })
            root_project |> build::build_project()
            case opt::expect(root_project.target, "enforced by 'build_project'")
                != "c" -> {
                "Package must have target type 'c' to run it!"
                    |> io::println()
                prc::exit(1)
            }
            ".gerap" |> concat(io::file_sep())
                |> concat(
                    root_project.name |> opt::expect("enforced by 'build_project'")
                )
                |> concat(" ")
                |> concat(
                    args |> arr::iter() |> iter::skip(2) |> str::join(" ")
                )
                |> env::run()
        }
        "clean" -> {
            case length(args) != 2 -> {
                io::println(USAGE)
                prc::exit(1)
            }
            panic("Not yet implemented!")
        }
    } else {
        io::println(USAGE)
        prc::exit(1)
    }
}